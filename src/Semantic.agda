module Semantic {n} where

open import Data.Empty
open import Data.Fin
  hiding (_+_)
open import Data.List
  hiding (lookup ; [_])
open import Data.Nat 
  hiding (_‚âü_)
open import Data.Product 
open import Data.Vec.Base
open import Function
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality 

open import AST {n}
open import Transformation {n}


-- BRACKETED LANGUAGE SEMANTICS
-- State of the memory at a certain program point for the bracketed program.
Memory : Set _
Memory = Vec ‚Ñï n

-- Update the value of a variable in memory.
infixl 6 _[_‚Ü¶_]
_[_‚Ü¶_] : Memory ‚Üí Fin n ‚Üí ‚Ñï ‚Üí Memory
m [ name ‚Ü¶ v ] = m [ name ]‚âî v

-- Semantic evaluation of expressions.
-- TODO(minor): Add the rest of the arythmetic operations besides ADD to the ASTExp type.
‚ü¶_‚üß : ASTExpS ‚Üí Memory ‚Üí ‚Ñï
‚ü¶ IntVal n ‚üß m = n
‚ü¶ Var name ‚üß m = lookup m name
‚ü¶ Add exp exp' ‚üß m = ‚ü¶ exp ‚üß m + ‚ü¶ exp' ‚üß m
  
-- Big step semantics of statements.
infixl 5 ‚ü®_,_‚ü©‚áì_
data ‚ü®_,_‚ü©‚áì_ : ASTStmS ‚Üí Memory ‚Üí Memory ‚Üí Set where
  Skip : {m : Memory} ‚Üí ‚ü® Skip , m ‚ü©‚áì m
  Seq : {m m' m'' : Memory}{s‚ÇÅ s‚ÇÇ : ASTStmS}
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì m'  
    ‚Üí ‚ü® s‚ÇÇ , m' ‚ü©‚áì m'' 
    ‚Üí ‚ü® Seq s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì m'' 
  Assign : {m : Memory} {x : Fin n} {e : ASTExpS} 
    ‚Üí ‚ü® x := e , m ‚ü©‚áì m [ x  ‚Ü¶ ‚ü¶ e ‚üß m ]
  -- TODO(minor): How do I set the precedence for this to work properly using '‚ü¶x := e‚üß' instead of '‚ü¶_:=_ x e‚üß'  
  AssignBr : {m : Memory} {x : Fin n} {e : ASTExpS} 
    ‚Üí ‚ü® ‚ü¶_:=_‚üß x e , m ‚ü©‚áì m [ x  ‚Ü¶ ‚ü¶ e ‚üß m ]
  IfT : {m m' : Memory} {e : ASTExpS} {v : ‚Ñï} {s‚ÇÅ s‚ÇÇ : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â° v
    ‚Üí v ‚â¢  0 
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì m' 
    ‚Üí ‚ü® If0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì m'  
  IfF : {m m' : Memory} {e : ASTExpS} {s‚ÇÅ s‚ÇÇ : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â° 0 
    ‚Üí ‚ü® s‚ÇÇ , m ‚ü©‚áì m' 
    ‚Üí ‚ü® If0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì m'  
  WhileT : {m m' m'' : Memory} {e : ASTExpS} {s : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â¢  0 
    ‚Üí ‚ü® s , m ‚ü©‚áì m'  
    ‚Üí ‚ü® While e s , m' ‚ü©‚áì m'' 
    ‚Üí ‚ü® While e s , m ‚ü©‚áì m''
  WhileF : {m : Memory} {e : ASTExpS} {s : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â° 0 
    ‚Üí ‚ü® While e s , m ‚ü©‚áì m


-- TRANSFORMED LANGUAGE SEMANTICS
-- State of the memory at a certain program point for the transformed program.
Memory‚Çú : Set _
Memory‚Çú = Vec (List ‚Ñï) n

-- TODO(minor): Dirty list lookup and update implementations, there's probably a cleaner way of doing this.
lookupOrDefault : ‚Ñï ‚Üí List ‚Ñï ‚Üí ‚Ñï
lookupOrDefault _ [] = 0
lookupOrDefault 0 (x ‚à∑ xs) = x
lookupOrDefault (suc n) (x ‚à∑ xs) = lookupOrDefault n xs

safeListUpdate : List ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí List ‚Ñï
safeListUpdate [] _ _ = []
safeListUpdate (x ‚à∑ xs) 0 v = v ‚à∑ xs
safeListUpdate (x ‚à∑ xs) (suc n) v = x ‚à∑ (safeListUpdate xs n v)

-- Update the value of a variable in memory of the transformed program.
infixl 6 _[_‚Ü¶_]‚Çú
_[_‚Ü¶_]‚Çú : Memory‚Çú ‚Üí Fin n √ó ‚Ñï ‚Üí ‚Ñï ‚Üí Memory‚Çú
m [ (name , index) ‚Ü¶ v ]‚Çú = 
  m [ name ]‚âî (safeListUpdate (lookup m name) index v)

-- Semantic evaluation of tranformed expressions.
-- TODO(minor): Add the rest of the arythmetic operations besides ADD to the ASTExp type.
‚ü¶_‚üß‚Çú : ASTExp ‚Üí Memory‚Çú ‚Üí ‚Ñï
‚ü¶ INTVAL n ‚üß‚Çú m = n
‚ü¶ VAR (name , index) ‚üß‚Çú m = lookupOrDefault index (lookup m name)       
‚ü¶ ADD exp exp' ‚üß‚Çú m = ‚ü¶ exp ‚üß‚Çú m + ‚ü¶ exp' ‚üß‚Çú m
  
-- Big step semantics of transformed statements.
infixl 5 ‚ü®_,_‚ü©‚áì‚Çú_
data ‚ü®_,_‚ü©‚áì‚Çú_ : ASTStm ‚Üí Memory‚Çú ‚Üí Memory‚Çú ‚Üí Set where
  Skip‚Çú : {m : Memory‚Çú} ‚Üí ‚ü® SKIP , m ‚ü©‚áì‚Çú m
  Seq‚Çú : {m m' m'' : Memory‚Çú} {s‚ÇÅ s‚ÇÇ : ASTStm}
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì‚Çú m'  
    ‚Üí ‚ü® s‚ÇÇ , m' ‚ü©‚áì‚Çú m'' 
    ‚Üí ‚ü® SEQ s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì‚Çú m'' 
  Assign‚Çú : {m : Memory‚Çú} {x : Fin n √ó ‚Ñï} {e : ASTExp} 
    ‚Üí ‚ü® ASSIGN x e , m ‚ü©‚áì‚Çú m [ x  ‚Ü¶ ‚ü¶ e ‚üß‚Çú m ]‚Çú
  IfT‚Çú : {m m' : Memory‚Çú} {e : ASTExp} {v : ‚Ñï} {s‚ÇÅ s‚ÇÇ : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â° v
    ‚Üí v ‚â¢  0 
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì‚Çú m' 
    ‚Üí ‚ü® IF0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì‚Çú m'  
  IfF‚Çú : {m m' : Memory‚Çú} {e : ASTExp} {s‚ÇÅ s‚ÇÇ : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â° 0 
    ‚Üí ‚ü® s‚ÇÇ , m ‚ü©‚áì‚Çú m' 
    ‚Üí ‚ü® IF0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì‚Çú m'  
  WhileT‚Çú : {m m' m'' : Memory‚Çú} {e : ASTExp} {s : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â¢  0 
    ‚Üí ‚ü® s , m ‚ü©‚áì‚Çú m'  
    ‚Üí ‚ü® WHILE e s , m' ‚ü©‚áì‚Çú m'' 
    ‚Üí ‚ü® WHILE e s , m ‚ü©‚áì‚Çú m''
  WhileF‚Çú : {m : Memory‚Çú} {e : ASTExp} {s : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â° 0 
    ‚Üí ‚ü® WHILE e s , m ‚ü©‚áì‚Çú m


-- CORRECTNESS PROOF

lookup‚Çú : Memory‚Çú  ‚Üí ùíú ‚Üí Fin n ‚Üí ‚Ñï
lookup‚Çú m‚Çú active x = lookupOrDefault (lookup active x) (lookup m‚Çú x)

-- Equality between a memory and the projection of a transformed memory on an active set.
_==‚Çò_-_ : Memory ‚Üí Memory‚Çú ‚Üí ùíú ‚Üí Set
m ==‚Çò m‚Çú - active = ‚àÄ x ‚Üí lookup m x ‚â° lookup‚Çú m‚Çú active x

-- Equality between two memory projections on active sets.
_-_==‚Çò‚Çú_-_ : Memory‚Çú ‚Üí ùíú ‚Üí Memory‚Çú ‚Üí ùíú ‚Üí Set
m1‚Çú - a1 ==‚Çò‚Çú m2‚Çú - a2 = ‚àÄ x ‚Üí lookup‚Çú m1‚Çú a1 x ‚â° lookup‚Çú m2‚Çú a2 x

-- Transitive property between ==‚Çò and ==‚Çò‚Çú .
==‚Çò-trans : {m : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {a a' : ùíú}
  ‚Üí m ==‚Çò m‚Çú - a
  ‚Üí m‚Çú - a ==‚Çò‚Çú m‚Çú' - a'
  ‚Üí m ==‚Çò m‚Çú' - a'
==‚Çò-trans meq meq2 var = trans (meq var) (meq2 var)   

-- Semantic equality of expression and its transformed counterpart.
-- TODO(major): This only returns the first half of the thesis from the Lemma 3. I'll need to define the second half at some point.
expEquality : {e : ASTExpS} {m : Memory} {m‚Çú : Memory‚Çú} {v v' : ‚Ñï} {active : ùíú}
  ‚Üí m ==‚Çò m‚Çú - active
  ‚Üí ‚ü¶ e ‚üß m ‚â° v 
  ‚Üí ‚ü¶ transExp e active ‚üß‚Çú m‚Çú ‚â° v' 
  ‚Üí v ‚â° v' 
expEquality {IntVal n} {m} {m‚Çú} {.(‚ü¶ IntVal n ‚üß m)} {.(‚ü¶ transExp (IntVal n) a ‚üß‚Çú m‚Çú)} {a} _ refl refl = refl
expEquality {Var x} {m} {m‚Çú} {.(‚ü¶ Var x ‚üß m)} {.(‚ü¶ transExp (Var x) a ‚üß‚Çú m‚Çú)} {a} m=mt refl refl = m=mt x
expEquality {Add e1 e2} {m} {m‚Çú} {.(‚ü¶ Add e1 e2 ‚üß m)} {.(‚ü¶ transExp (Add e1 e2) a ‚üß‚Çú m‚Çú)} {a} m=mt refl refl = 
  let expEq1 = expEquality {e1} {m} {m‚Çú} {‚ü¶ e1 ‚üß m} {‚ü¶ transExp e1 a ‚üß‚Çú m‚Çú} {a} m=mt refl refl
      expEq2 = expEquality {e2} {m} {m‚Çú} {‚ü¶ e2 ‚üß m} {‚ü¶ transExp e2 a ‚üß‚Çú m‚Çú} {a} m=mt refl refl
   in cong‚ÇÇ _+_ expEq1 expEq2

-- TODO(major): Implement.
:=ùíú-memEq : {a a' : ùíú} {m‚Çú m‚Çú' : Memory‚Çú} 
  ‚Üí ‚ü® a' :=ùíú a , m‚Çú ‚ü©‚áì‚Çú m‚Çú'
  ‚Üí m‚Çú - a ==‚Çò‚Çú m‚Çú' - a'
:=ùíú-memEq {a} {a'} {m‚Çú} {m‚Çú'} d = {! !}

-- TODO(minor): I should clean up these properties and probably move them to another file. 
-- Œì[x‚Ü¶st] x = st
lookupx‚àòchangex : 
  {A : Set} {m : ‚Ñï} {v : A} (index : Fin m) (vector : Vec A m) 
  ‚Üí lookup (vector [ index ]‚âî v) index ‚â° v
lookupx‚àòchangex zero (head ‚à∑ tail) = refl
lookupx‚àòchangex (suc x) (head ‚à∑ tail) = lookupx‚àòchangex x tail 

-- x ‚â† y ‚áí Œì[x‚Ü¶st] y = Œì y
lookupy‚àòchangex : 
  {m v : ‚Ñï} (i1 i2 : Fin m) (vector : Vec ‚Ñï m)
  ‚Üí i2 ‚â¢  i1
  ‚Üí lookup (vector [ i1 ]‚âî v) i2 ‚â° lookup vector i2
lookupy‚àòchangex zero zero vector i2!=i1 = ‚ä•-elim (i2!=i1 refl)
lookupy‚àòchangex zero (suc x) (head ‚à∑ tail) i2!=i1 = refl
lookupy‚àòchangex (suc x) zero (head ‚à∑ tail) i2!=i1 = refl
lookupy‚àòchangex (suc x) (suc y) (head ‚à∑ tail) i2!=i1 = lookupy‚àòchangex x y tail (i2!=i1 ‚àò cong suc)  

-- TODO(minor): I'll probably have to update the other function definitions to cover all cases with this property,
--  but at least it works for now.
listLookupx‚àòlistUpdatex : 
  {v : ‚Ñï} (a : ‚Ñï) (list : List ‚Ñï) 
  ‚Üí lookupOrDefault a (safeListUpdate list a v) ‚â° v
listLookupx‚àòlistUpdatex a [] = {!   !}
listLookupx‚àòlistUpdatex 0 (head ‚à∑ tail) = refl
listLookupx‚àòlistUpdatex (suc n) (head ‚à∑ tail) = listLookupx‚àòlistUpdatex n tail

lookup‚Çúx‚àòchange‚Çúx : 
  {m v activeVar : ‚Ñï} (index : Fin m) (vector : Vec (List ‚Ñï) m) 
  ‚Üí lookupOrDefault activeVar (lookup (vector [ index ]‚âî (safeListUpdate (lookup vector index) activeVar v)) index) ‚â° v
lookup‚Çúx‚àòchange‚Çúx {_} {_} {activeVar} zero (head ‚à∑ tail) = listLookupx‚àòlistUpdatex activeVar head
lookup‚Çúx‚àòchange‚Çúx (suc x) (head ‚à∑ tail) = lookup‚Çúx‚àòchange‚Çúx x tail 

lookup‚Çúy‚àòchange‚Çúx : 
  {m v activeVar activeVar2 : ‚Ñï} (i1 i2 : Fin m) (vector : Vec (List ‚Ñï) m) 
  ‚Üí i2 ‚â¢  i1
  ‚Üí lookupOrDefault activeVar (lookup (vector [ i1 ]‚âî (safeListUpdate (lookup vector i1) activeVar2 v)) i2) ‚â° lookupOrDefault activeVar (lookup vector i2)
lookup‚Çúy‚àòchange‚Çúx zero zero vector i2!=i1 = ‚ä•-elim (i2!=i1 refl)
lookup‚Çúy‚àòchange‚Çúx zero (suc x) (head ‚à∑ tail) i2!=i1 = refl
lookup‚Çúy‚àòchange‚Çúx (suc x) zero (head ‚à∑ tail) i2!=i1 = refl
lookup‚Çúy‚àòchange‚Çúx (suc x) (suc y) (head ‚à∑ tail) i2!=i1 = lookup‚Çúy‚àòchange‚Çúx x y tail (i2!=i1 ‚àò cong suc)  

-- Correctness of the program transformation.
-- TODO(major): Implement.
correctness : {s : ASTStmS} {m m' : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {active : ùíú}
  ‚Üí ‚ü® s , m ‚ü©‚áì m'
  ‚Üí ‚ü® proj‚ÇÅ (transStm s active) , m‚Çú ‚ü©‚áì‚Çú m‚Çú'
  ‚Üí m ==‚Çò m‚Çú - active
  ‚Üí m' ==‚Çò m‚Çú' - (proj‚ÇÇ (transStm s active))

-- TODO(minor): Rewrite this using a let and type explanations for the difficult terms like I did in AssignmentId.
correctness {x := e} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß m ])} {m‚Çú} {.(m‚Çú [ x , lookup a x ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú ]‚Çú)} {a} 
  Assign
  Assign‚Çú 
  meq varName with varName ‚âü x
...              | yes vN=x = trans 
                                -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß m) varName === v'
                                (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß m) varName === v
                                  (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß m) varName === lookup (m [ varName ]‚âî ‚ü¶ e ‚üß m) varName
                                    (sym (cong (Œª y ‚Üí lookup (m [ y ]‚âî ‚ü¶ e ‚üß m) varName) vN=x))
                                  -- lookup (m [ varName ]‚âî v) varName ‚â° v
                                    (lookupx‚àòchangex varName m)
                                  )
                                  -- v === v'
                                  (expEquality {e} {m} {m‚Çú} meq refl refl)
                                ) 
                                -- v' === lookup (m‚Çú [ x , lookup a x ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú) varName
                                (trans 
                                  -- v' === lookupOrDefault activeVar (lookup (m‚Çú [ varName ]‚âî (safeListUpdate (lookup m‚Çú varName) activeVar v)) varName)
                                  (sym (lookup‚Çúx‚àòchange‚Çúx varName m‚Çú))
                                  -- lookupOrDefault activeVar (lookup (m‚Çú [ varName ]‚âî (safeListUpdate (lookup m‚Çú varName) activeVar v)) varName)
                                  -- ===
                                  -- lookupOrDefault activeVar (lookup (m‚Çú [ x ]‚âî (safeListUpdate (lookup m‚Çú x) (lookup a x) v)) varName)
                                  (cong (Œª y ‚Üí lookupOrDefault (lookup a varName) (lookup (m‚Çú [ y , lookup a y ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú ]‚Çú) varName)) vN=x)
                                )
...              | no vN!=x = trans 
                                (trans 
                                  (lookupy‚àòchangex x varName m vN!=x)
                                  (meq varName)
                                ) 
                                (sym (lookup‚Çúy‚àòchange‚Çúx x varName m‚Çú vN!=x))

-- TODO(minor): Same as above, rewrite this using a let and type explanations.
correctness {‚ü¶ x := e ‚üß} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß m ])} {m‚Çú} {m‚Çú'} {a} 
  AssignBr 
  Assign‚Çú 
  meq varName with varName ‚âü x
...              | yes vN=x = trans 
                                -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß m) varName === v'
                                (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß m) varName === v
                                  (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß m) varName === lookup (m [ varName ]‚âî ‚ü¶ e ‚üß m) varName
                                    (sym (cong (Œª y ‚Üí lookup (m [ y ]‚âî ‚ü¶ e ‚üß m) varName) vN=x))
                                  -- lookup (m [ varName ]‚âî v) varName ‚â° v
                                    (lookupx‚àòchangex varName m)
                                  )
                                  -- v === v'
                                  (expEquality {e} {m} {m‚Çú} meq refl refl)
                                )
                                -- v' ‚â° lookup‚Çú m‚Çú' a' varName
                                (sym (trans
                                  -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) varName) (lookup (m‚Çú [ x ]‚âî (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')) varName)
                                  -- ===
                                  -- lookupOrDefault (suc (lookup a x)) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                  (trans
                                    -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) varName) (lookup (m‚Çú [ x , suc (lookup a x) ‚Ü¶ v' ]‚Çú) varName)
                                    -- ===
                                    -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) x) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                    (trans 
                                      (cong (Œª y ‚Üí lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) y) (lookup (m‚Çú [ x ]‚âî (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) (‚ü¶ transExp e a ‚üß‚Çú m‚Çú))) y)) vN=x)
                                      (cong (Œª y ‚Üí lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) x) y) (lookupx‚àòchangex x m‚Çú))
                                    )
                                    -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) x) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                    -- ===
                                    -- lookupOrDefault (suc (lookup a x)) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                    (cong (Œª y ‚Üí lookupOrDefault y (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) (‚ü¶ transExp e a ‚üß‚Çú m‚Çú))) (lookupx‚àòchangex x a))
                                  )
                                  -- lookupOrDefault (suc (lookup a x)) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v') ‚â° v'
                                  (listLookupx‚àòlistUpdatex (suc (lookup a x)) (lookup m‚Çú x))
                                ))
...              | no vN!=x = trans 
                                -- lookup m' varName ‚â° lookup‚Çú m‚Çú active varName
                                (trans 
                                  -- lookup m' varName ‚â° lookup m varName
                                  (lookupy‚àòchangex x varName m vN!=x)
                                  -- lookup m varName ‚â° lookup‚Çú m‚Çú active varName
                                  (meq varName)
                                )
                                -- lookup‚Çú m‚Çú active varName ‚â° lookup‚Çú m‚Çú' active' varName
                                (trans
                                  -- lookup‚Çú m‚Çú a varName ‚â° lookup‚Çú m‚Çú' a varName
                                  (sym (lookup‚Çúy‚àòchange‚Çúx x varName m‚Çú vN!=x))
                                  -- lookup‚Çú m‚Çú' a varName ‚â° lookup‚Çú m‚Çú' a' varName
                                  (cong (Œª y ‚Üí lookupOrDefault y (lookup m‚Çú' varName)) (sym (lookupy‚àòchangex x varName a vN!=x)))  
                                )

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfT {.m} {.m'} {.cond} {v} {.sT} {.sF} em=v v<>0 d) 
  (IfT‚Çú {.m‚Çú} {.m‚Çú'} {.(transExp cond a)} {v'} {.(SEQ (proj‚ÇÅ (transStm sT a)) (mergeùíú (proj‚ÇÇ (transStm sT a)) (proj‚ÇÇ (transStm sF a)) :=ùíú proj‚ÇÇ (transStm sT a)))} {sF'} em'=v' v'<>0 (Seq‚Çú {m1} {m2} {m3} d' d''))
  meq = 
    let aT = proj‚ÇÇ (transStm sT a)
        aF = proj‚ÇÇ (transStm sF a)
        a' = mergeùíú aT aF
        m1=mt1a' = correctness {sT} {m} {m'} {m‚Çú} {m2} {a} d d' meq
        mt1a'=mt2a'' = :=ùíú-memEq {aT} {a'} d''
      in ==‚Çò-trans {m'} {m2} {m‚Çú'} {aT} {a'} m1=mt1a' mt1a'=mt2a''

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfT {.m} {.m'} {.cond} {v} {_} {_} em=v v<>0 d) 
  (IfF‚Çú em'=0 d') 
  meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {v} {0} {a} meq em=v em'=0
     in ‚ä•-elim (v<>0 em=em')

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfF em=0 d) 
  (IfT‚Çú {.m‚Çú} {.m‚Çú'} {_} {v} {_} {_} em'=v v<>0 d') 
  meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {0} {v} {a} meq em=0 em'=v
     in ‚ä•-elim (v<>0 (sym em=em'))

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a}
  (IfF {.m} {.m'} {.cond} {.sT} {.sF} em=0 d) 
  (IfF‚Çú {.m‚Çú} {.m‚Çú'} {.(transExp cond a)} {sT'} {.(SEQ (proj‚ÇÅ (transStm sF a)) (mergeùíú (proj‚ÇÇ (transStm sT a)) (proj‚ÇÇ (transStm sF a)) :=ùíú proj‚ÇÇ (transStm sF a)))} em'=0 (Seq‚Çú {m1} {m2} {m3} d' d''))
  meq = 
    let aT = proj‚ÇÇ (transStm sT a)
        aF = proj‚ÇÇ (transStm sF a)
        a' = mergeùíú aT aF
        m1=mt1a' = correctness {sF} {m} {m'} {m‚Çú} {m2} {a} d d' meq
        mt1a'=mt2a'' = :=ùíú-memEq {aF} {a'} d''
      in ==‚Çò-trans {m'} {m2} {m‚Çú'} {aF} {a'} m1=mt1a' mt1a'=mt2a''

correctness {While x s} {m} {m'} {m‚Çú} {m‚Çú'} {a} (WhileT x‚ÇÅ d d‚ÇÅ) d' meq = {!  !}

correctness {While cond s} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (WhileT {.m} {_} {_} {.cond} {v} {_} em=v v<>0 _ _) 
  (Seq‚Çú d' (WhileF‚Çú em'=0)) 
  meq = 
    let a' = mergeùíú a (proj‚ÇÇ (transStm s a))
        ùíúmemEq = :=ùíú-memEq {a} {a'} {m‚Çú} {m‚Çú'} d'
        em=em' = expEquality {cond} {m} {_} {v} {0} {_} (==‚Çò-trans {m} {m‚Çú} {m‚Çú'} {a} {a'} meq ùíúmemEq) em=v em'=0
      in ‚ä•-elim (v<>0 em=em')

correctness {While cond s} {m} {.m} {m‚Çú} {m‚Çú'} {a} 
  (WhileF {.m} {.cond} {.s} em=0) 
  (Seq‚Çú {m1} {m2} {m3} d' (WhileT‚Çú {_} {_} {_} {_} {v} {_} em'=v v<>0 _ _)) 
  meq = 
    let a' = mergeùíú a (proj‚ÇÇ (transStm s a))
        ùíúmemEq = :=ùíú-memEq {a} {a'} {m‚Çú} {m2} d'
        em=em' = expEquality {cond} {m} {_} {0} {v} {_} (==‚Çò-trans {m} {m‚Çú} {m2} {a} {a'} meq ùíúmemEq) em=0 em'=v
      in ‚ä•-elim (v<>0 (sym em=em'))

correctness {While cond s} {m} {.m} {m‚Çú} {m‚Çú'} {a} 
  (WhileF x‚ÇÅ) 
  (Seq‚Çú d' (WhileF‚Çú x‚ÇÇ)) 
  meq = let a' = mergeùíú a (proj‚ÇÇ (transStm s a))
            ùíúmemEq = :=ùíú-memEq {a} {a'} {m‚Çú} {m‚Çú'} d'
         in ==‚Çò-trans {m} {m‚Çú} {m‚Çú'} {a} {a'} meq ùíúmemEq

correctness {Seq s s‚ÇÅ} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (Seq {m = .m} {m' = m2} {m'' = .m'} d d‚ÇÅ) 
  (Seq‚Çú {m = .m‚Çú} {m' = mt2} {m'' = .m‚Çú'} d' d'') 
  meq = 
    let h1 = correctness {s} {m} {m2} {m‚Çú} {mt2} d d' meq
     in correctness d‚ÇÅ d'' h1

correctness {Skip} {m} {.m} {m‚Çú} {.m‚Çú} {a} Skip Skip‚Çú meq = meq
