module Semantic {n} where

open import Data.Empty
open import Data.Fin
  hiding (_+_)
open import Data.List
  hiding (lookup ; [_])
open import Data.Nat 
open import Data.Product 
open import Data.Vec.Base
open import Relation.Binary.PropositionalEquality 

open import AST {n}
open import Transformation {n}


-- BRACKETED LANGUAGE SEMANTICS
-- State of the memory at a certain program point for the bracketed program.
Memory : Set _
Memory = Vec ‚Ñï n

-- Update the value of a variable in memory.
infixl 6 _[_‚Ü¶_]
_[_‚Ü¶_] : Memory ‚Üí Fin n ‚Üí ‚Ñï ‚Üí Memory
m [ name ‚Ü¶ v ] = m [ name ]‚âî v

-- Semantic evaluation of expressions.
-- TODO(minor): Add the rest of the arythmetic operations besides ADD to the ASTExp type.
‚ü¶_‚üß : ASTExpS ‚Üí Memory ‚Üí ‚Ñï
‚ü¶ IntVal n ‚üß m = n
‚ü¶ Var name ‚üß m = lookup m name
‚ü¶ Add exp exp' ‚üß m = ‚ü¶ exp ‚üß m + ‚ü¶ exp' ‚üß m
  
-- Big step semantics of statements.
infixl 5 ‚ü®_,_‚ü©‚áì_
data ‚ü®_,_‚ü©‚áì_ : ASTStmS ‚Üí Memory ‚Üí Memory ‚Üí Set where
  Skip : {m : Memory} ‚Üí ‚ü® Skip , m ‚ü©‚áì m
  Seq : {m m' m'' : Memory}{s‚ÇÅ s‚ÇÇ : ASTStmS}
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì m'  
    ‚Üí ‚ü® s‚ÇÇ , m' ‚ü©‚áì m'' 
    ‚Üí ‚ü® Seq s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì m'' 
  Assign : {m : Memory} {x : Fin n} {e : ASTExpS} 
    ‚Üí ‚ü® x := e , m ‚ü©‚áì m [ x  ‚Ü¶ ‚ü¶ e ‚üß m ]
  -- TODO(minor): How do I set the precedence for this to work properly using '‚ü¶x := e‚üß' instead of '‚ü¶_:=_ x e‚üß'  
  AssignBr : {m : Memory} {x : Fin n} {e : ASTExpS} 
    ‚Üí ‚ü® ‚ü¶_:=_‚üß x e , m ‚ü©‚áì m [ x  ‚Ü¶ ‚ü¶ e ‚üß m ]
  IfT : {m m' : Memory} {e : ASTExpS} {v : ‚Ñï} {s‚ÇÅ s‚ÇÇ : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â° v
    ‚Üí v ‚â¢  0 
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì m' 
    ‚Üí ‚ü® If0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì m'  
  IfF : {m m' : Memory} {e : ASTExpS} {s‚ÇÅ s‚ÇÇ : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â° 0 
    ‚Üí ‚ü® s‚ÇÇ , m ‚ü©‚áì m' 
    ‚Üí ‚ü® If0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì m'  
  WhileT : {m m' m'' : Memory} {e : ASTExpS} {s : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â¢  0 
    ‚Üí ‚ü® s , m ‚ü©‚áì m'  
    ‚Üí ‚ü® While e s , m' ‚ü©‚áì m'' 
    ‚Üí ‚ü® While e s , m ‚ü©‚áì m''
  WhileF : {m : Memory} {e : ASTExpS} {s : ASTStmS}
    ‚Üí ‚ü¶ e ‚üß m ‚â° 0 
    ‚Üí ‚ü® While e s , m ‚ü©‚áì m


-- TRANSFORMED LANGUAGE SEMANTICS
-- State of the memory at a certain program point for the transformed program.
Memory‚Çú : Set _
Memory‚Çú = Vec (List ‚Ñï) n

-- TODO(minor): Dirty list lookup and update implementations, there's probably a cleaner way of doing this.
lookupOrDefault : ‚Ñï ‚Üí List ‚Ñï ‚Üí ‚Ñï
lookupOrDefault _ [] = 0
lookupOrDefault 0 (x ‚à∑ xs) = x
lookupOrDefault (suc n) (x ‚à∑ xs) = lookupOrDefault n xs

safeListUpdate : List ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí List ‚Ñï
safeListUpdate [] _ _ = []
safeListUpdate (x ‚à∑ xs) 0 v = v ‚à∑ xs
safeListUpdate (x ‚à∑ xs) (suc n) v = x ‚à∑ (safeListUpdate xs n v)

-- Update the value of a variable in memory of the transformed program.
infixl 6 _[_‚Ü¶_]‚Çú
_[_‚Ü¶_]‚Çú : Memory‚Çú ‚Üí Fin n √ó ‚Ñï ‚Üí ‚Ñï ‚Üí Memory‚Çú
m [ (name , index) ‚Ü¶ v ]‚Çú = 
  m [ name ]‚âî (safeListUpdate (lookup m name) index v)

-- Semantic evaluation of tranformed expressions.
-- TODO(minor): Add the rest of the arythmetic operations besides ADD to the ASTExp type.
‚ü¶_‚üß‚Çú : ASTExp ‚Üí Memory‚Çú ‚Üí ‚Ñï
‚ü¶ INTVAL n ‚üß‚Çú m = n
‚ü¶ VAR (name , index) ‚üß‚Çú m = lookupOrDefault index (lookup m name)       
‚ü¶ ADD exp exp' ‚üß‚Çú m = ‚ü¶ exp ‚üß‚Çú m + ‚ü¶ exp' ‚üß‚Çú m
  
-- Big step semantics of transformed statements.
infixl 5 ‚ü®_,_‚ü©‚áì‚Çú_
data ‚ü®_,_‚ü©‚áì‚Çú_ : ASTStm ‚Üí Memory‚Çú ‚Üí Memory‚Çú ‚Üí Set where
  Skip‚Çú : {m : Memory‚Çú} ‚Üí ‚ü® SKIP , m ‚ü©‚áì‚Çú m
  Seq‚Çú : {m m' m'' : Memory‚Çú} {s‚ÇÅ s‚ÇÇ : ASTStm}
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì‚Çú m'  
    ‚Üí ‚ü® s‚ÇÇ , m' ‚ü©‚áì‚Çú m'' 
    ‚Üí ‚ü® SEQ s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì‚Çú m'' 
  Assign‚Çú : {m : Memory‚Çú} {x : Fin n √ó ‚Ñï} {e : ASTExp} 
    ‚Üí ‚ü® ASSIGN x e , m ‚ü©‚áì‚Çú m [ x  ‚Ü¶ ‚ü¶ e ‚üß‚Çú m ]‚Çú
  IfT‚Çú : {m m' : Memory‚Çú} {e : ASTExp} {v : ‚Ñï} {s‚ÇÅ s‚ÇÇ : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â° v
    ‚Üí v ‚â¢  0 
    ‚Üí ‚ü® s‚ÇÅ , m ‚ü©‚áì‚Çú m' 
    ‚Üí ‚ü® IF0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì‚Çú m'  
  IfF‚Çú : {m m' : Memory‚Çú} {e : ASTExp} {s‚ÇÅ s‚ÇÇ : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â° 0 
    ‚Üí ‚ü® s‚ÇÇ , m ‚ü©‚áì‚Çú m' 
    ‚Üí ‚ü® IF0 e s‚ÇÅ s‚ÇÇ , m ‚ü©‚áì‚Çú m'  
  WhileT‚Çú : {m m' m'' : Memory‚Çú} {e : ASTExp} {s : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â¢  0 
    ‚Üí ‚ü® s , m ‚ü©‚áì‚Çú m'  
    ‚Üí ‚ü® WHILE e s , m' ‚ü©‚áì‚Çú m'' 
    ‚Üí ‚ü® WHILE e s , m ‚ü©‚áì‚Çú m''
  WhileF‚Çú : {m : Memory‚Çú} {e : ASTExp} {s : ASTStm}
    ‚Üí ‚ü¶ e ‚üß‚Çú m ‚â° 0 
    ‚Üí ‚ü® WHILE e s , m ‚ü©‚áì‚Çú m


-- CORRECTNESS PROOF

lookup‚Çú : Memory‚Çú  ‚Üí ùíú ‚Üí Fin n ‚Üí ‚Ñï
lookup‚Çú m‚Çú active x = lookupOrDefault (lookup active x) (lookup m‚Çú x)

-- Equality between a memory and the projection of a transformed memory on an active set.
_==‚Çò_-_ : Memory ‚Üí Memory‚Çú ‚Üí ùíú ‚Üí Set
m ==‚Çò m‚Çú - active = ‚àÄ x ‚Üí lookup m x ‚â° lookup‚Çú m‚Çú active x

-- Semantic equality of expression and its transformed counterpart.
-- TODO(major): This only returns the first half of the thesis from the Lemma 3. I'll need to define the second half at some point.
expEquality : {e : ASTExpS} {m : Memory} {m‚Çú : Memory‚Çú} {v v' : ‚Ñï} {active : ùíú}
  ‚Üí m ==‚Çò m‚Çú - active
  ‚Üí ‚ü¶ e ‚üß m ‚â° v 
  ‚Üí ‚ü¶ transExp e active ‚üß‚Çú m‚Çú ‚â° v' 
  ‚Üí v ‚â° v' 
expEquality {IntVal n} {m} {m‚Çú} {.(‚ü¶ IntVal n ‚üß m)} {.(‚ü¶ transExp (IntVal n) a ‚üß‚Çú m‚Çú)} {a} _ refl refl = refl
expEquality {Var x} {m} {m‚Çú} {.(‚ü¶ Var x ‚üß m)} {.(‚ü¶ transExp (Var x) a ‚üß‚Çú m‚Çú)} {a} m=mt refl refl = m=mt x
expEquality {Add e1 e2} {m} {m‚Çú} {.(‚ü¶ Add e1 e2 ‚üß m)} {.(‚ü¶ transExp (Add e1 e2) a ‚üß‚Çú m‚Çú)} {a} m=mt refl refl = 
  let expEq1 = expEquality {e1} {m} {m‚Çú} {‚ü¶ e1 ‚üß m} {‚ü¶ transExp e1 a ‚üß‚Çú m‚Çú} {a} m=mt refl refl
      expEq2 = expEquality {e2} {m} {m‚Çú} {‚ü¶ e2 ‚üß m} {‚ü¶ transExp e2 a ‚üß‚Çú m‚Çú} {a} m=mt refl refl
   in cong‚ÇÇ _+_ expEq1 expEq2

-- Correctness of the program transformation.
-- TODO(major): Implement.
correctness : {s : ASTStmS} {m m' : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {active : ùíú}
  ‚Üí ‚ü® s , m ‚ü©‚áì m'
  ‚Üí ‚ü® proj‚ÇÅ (transStm s active) , m‚Çú ‚ü©‚áì‚Çú m‚Çú'
  ‚Üí m ==‚Çò m‚Çú - active
  ‚Üí m' ==‚Çò m‚Çú' - (proj‚ÇÇ (transStm s active))

correctness {x := e} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß m ])} {m‚Çú} {.(m‚Çú [ x , lookup a x ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú ]‚Çú)} {a} 
  Assign
  Assign‚Çú 
  meq = {!   !}

correctness {‚ü¶ x := e ‚üß} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß m ])} {m‚Çú} {.(m‚Çú [ x , suc (lookup a x) ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú ]‚Çú)} {a} 
  AssignBr 
  Assign‚Çú 
  meq = {!   !}

-- TODO(major): Apparently, I'll also need Lemma 4 for the end of the proof.
correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfT {.m} {.m'} {.cond} {v} {.sT} {.sF} em=v v<>0 d) 
  (IfT‚Çú {.m‚Çú} {.m‚Çú'} {.(transExp cond a)} {s‚ÇÅ} {s‚ÇÇ} em'=v' v'<>0 d') 
  meq = {! !}

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfT {.m} {.m'} {.cond} {v} {_} {_} em=v v<>0 d) 
  (IfF‚Çú em'=0 d') 
  meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {v} {0} {a} meq em=v em'=0
     in ‚ä•-elim (v<>0 em=em')

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfF em=0 d) 
  (IfT‚Çú {.m‚Çú} {.m‚Çú'} {_} {v} {_} {_} em'=v v<>0 d') 
  meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {0} {v} {a} meq em=0 em'=v
     in ‚ä•-elim (v<>0 (sym em=em'))

correctness {If0 x s s‚ÇÅ} {m} {m'} {m‚Çú} {m‚Çú'} {a} (IfF x‚ÇÅ d) (IfF‚Çú x‚ÇÇ d') meq = {!   !}

correctness {While x s} {m} {m'} {m‚Çú} {m‚Çú'} {a} (WhileT x‚ÇÅ d d‚ÇÅ) d' meq = {!  !}

correctness {While x s} {m} {.m} {m‚Çú} {m‚Çú'} {a} (WhileF x‚ÇÅ) d' meq = {!  !}

correctness {Seq s s‚ÇÅ} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (Seq {m = .m} {m' = m2} {m'' = .m'} d d‚ÇÅ) 
  (Seq‚Çú {m = .m‚Çú} {m' = mt2} {m'' = .m‚Çú'} d' d'') 
  meq = 
    let h1 = correctness {s} {m} {m2} {m‚Çú} {mt2} d d' meq
     in correctness d‚ÇÅ d'' h1

correctness {Skip} {m} {.m} {m‚Çú} {.m‚Çú} {a} Skip Skip‚Çú meq = meq
