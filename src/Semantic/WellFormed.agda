module Semantic.WellFormed {n} where

open import Data.Fin
  renaming (_‚âü_ to _‚âüf_)
open import Data.List
  hiding (lookup ; [_])
open import Data.Nat 
  renaming (_<_ to _<‚Çô_)
open import Data.Product 
open import Data.Vec.Base
  hiding (length)
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality 

open import Semantic.Memory {n}
open import Semantic.Semantic {n}
open import Transformation.ActiveSet {n}
open import Transformation.AST {n}
open import Transformation.Transformation {n}

wellFormed : Memory‚Çú ‚Üí ùíú ‚Üí Set
wellFormed m‚Çú a = ‚àÄ x ‚Üí lookup a x <‚Çô length (lookup m‚Çú x)

data wellFormedStm : ASTStmS ‚Üí Memory‚Çú ‚Üí ùíú ‚Üí Set where
  SkipWF : {m : Memory‚Çú} {a : ùíú}
    ‚Üí wellFormed m a
    ‚Üí wellFormedStm Skip m a
  SeqWF : {s s' : ASTStmS} {m : Memory‚Çú} {a : ùíú}
    ‚Üí wellFormedStm s m a
    ‚Üí wellFormedStm s' m (proj‚ÇÇ (transStm s a))
    ‚Üí wellFormedStm (Seq s s') m a
  AssignWF : {v : Fin n} {e : ASTExpS} {m : Memory‚Çú} {a : ùíú}
    ‚Üí wellFormed m a
    ‚Üí wellFormedStm (v := e) m a
  AssignBrWF : {v : Fin n} {e : ASTExpS} {m : Memory‚Çú} {a : ùíú}  
    ‚Üí wellFormed m (proj‚ÇÇ (transStm ‚ü¶ v := e ‚üß a))
    ‚Üí wellFormedStm ‚ü¶ v := e ‚üß m a
  IfWF : {e : ASTExpS} {s s' : ASTStmS} {m : Memory‚Çú} {a : ùíú}
    ‚Üí wellFormed m (proj‚ÇÇ (transStm (If0 e s s') a))
    ‚Üí wellFormedStm s m a
    ‚Üí wellFormedStm s' m a
    ‚Üí wellFormedStm (If0 e s s') m a
  WhileWF : {e : ASTExpS} {s : ASTStmS} {m : Memory‚Çú} {a : ùíú}
    ‚Üí wellFormed m (mergeùíú a (proj‚ÇÇ (transStm s a)))
    ‚Üí wellFormedStm s m (mergeùíú a (proj‚ÇÇ (transStm s a)))
    ‚Üí wellFormedStm (While e s) m a

lengthUpdateL=lengthL : (list : List ‚Ñï) ‚Üí (index : ‚Ñï) ‚Üí (value : ‚Ñï) 
  ‚Üí length (safeListUpdate list index value) ‚â° length list
lengthUpdateL=lengthL [] _ _ = refl
lengthUpdateL=lengthL (x ‚à∑ xs) zero _ = refl
lengthUpdateL=lengthL (x ‚à∑ xs) (suc index) value = cong suc (lengthUpdateL=lengthL xs index value)

wellFormed-trans : {s : ASTStm} {m‚Çú m‚Çú' : Memory‚Çú} {a : ùíú} 
  ‚Üí wellFormed m‚Çú a 
  ‚Üí ‚ü® s , m‚Çú ‚ü©‚áì‚Çú m‚Çú'
  ‚Üí wellFormed m‚Çú' a
wellFormed-trans wFm‚Çúa Skip‚Çú = wFm‚Çúa
wellFormed-trans {_} {m‚Çú} {m‚Çú'} {a} wFm‚Çúa (Assign‚Çú {_} {x , index} {e}) varName with varName ‚âüf x
...   | yes vN=x = let -- lookup mt' x == (safeListUpdate ...)
                       lm‚Çú'x=lUm‚Çúx = lookupx‚àòchangex x m‚Çú
                       -- length (safeListUpdate (lookup m‚Çú x) index (‚ü¶ e ‚üß‚Çú m‚Çú)) ‚â° length (lookup m‚Çú x)
                       lenlUm‚Çúx=lenlm‚Çú'x = lengthUpdateL=lengthL (lookup m‚Çú x) index (‚ü¶ e ‚üß‚Çú m‚Çú)
                       -- length (lookup (m‚Çú [ x ]‚âî v) x) ‚â° length (lookup m‚Çú x)
                       lenlm‚Çú'x=lenlm‚Çúx = trans (cong length lm‚Çú'x=lUm‚Çúx) lenlUm‚Çúx=lenlm‚Çú'x
                       -- length (lookup (m‚Çú [ varName ]‚âî v) varName) ‚â° length (lookup m‚Çú varName)
                       lenlm‚Çú'vN=lenlm‚ÇúvN = subst (\v ‚Üí length (lookup m‚Çú' v) ‚â° length (lookup m‚Çú v)) (sym vN=x) lenlm‚Çú'x=lenlm‚Çúx
                    in subst (\v ‚Üí lookup a varName <‚Çô v) (sym lenlm‚Çú'vN=lenlm‚ÇúvN) (wFm‚Çúa varName)
...   | no vN<>x = subst (\v ‚Üí lookup a varName <‚Çô length v) (sym (lookupy‚àòchangex x varName m‚Çú vN<>x)) (wFm‚Çúa varName)
wellFormed-trans {_} {_} {_} {a} wFm‚Çúa (Seq‚Çú d d') = 
  wellFormed-trans {_} {_} {_} {a} (wellFormed-trans {_} {_} {_} {a} wFm‚Çúa d) d'
wellFormed-trans {_} {_} {_} {a} wFm‚Çúa (IfT‚Çú _ _ d) = wellFormed-trans {_} {_} {_} {a} wFm‚Çúa d
wellFormed-trans {_} {_} {_} {a} wFm‚Çúa (IfF‚Çú _ d) = wellFormed-trans {_} {_} {_} {a} wFm‚Çúa d
wellFormed-trans {_} {_} {_} {a} wFm‚Çúa (WhileT‚Çú _ _ d d') = 
  wellFormed-trans {_} {_} {_} {a} (wellFormed-trans {_} {_} {_} {a} wFm‚Çúa d) d'
wellFormed-trans wFm‚Çúa (WhileF‚Çú _) = wFm‚Çúa

wellFormedStmTransitive : {s : ASTStmS} {s‚Çú : ASTStm} {m m' : Memory‚Çú} {a : ùíú}
  ‚Üí wellFormedStm s m a
  ‚Üí ‚ü® s‚Çú , m ‚ü©‚áì‚Çú m'
  ‚Üí wellFormedStm s m' a
wellFormedStmTransitive {_} {_} {_} {_} {a} (SkipWF wFm‚Çúa) d = 
  SkipWF (wellFormed-trans {_} {_} {_} {a} wFm‚Çúa d)
wellFormedStmTransitive {_} {_} {_} {_} {a} (AssignWF wFm‚Çúa) d = 
  AssignWF (wellFormed-trans {_} {_} {_} {a} wFm‚Çúa d)
wellFormedStmTransitive (AssignBrWF {v} {e} {_} {a} wFm‚Çúa') d = 
  AssignBrWF (wellFormed-trans {_} {_} {_} {proj‚ÇÇ (transStm ‚ü¶ v := e ‚üß a)} wFm‚Çúa' d)
wellFormedStmTransitive (SeqWF wFsm‚Çúa wFs'm‚Çúa) d = 
  SeqWF (wellFormedStmTransitive wFsm‚Çúa d) 
        (wellFormedStmTransitive wFs'm‚Çúa d) 
wellFormedStmTransitive (IfWF {e} {s} {s'} {_} {a} wFm‚Çúa' wFsm‚Çúa wFs'm‚Çúa) d = 
  IfWF (wellFormed-trans {_} {_} {_} {proj‚ÇÇ (transStm (If0 e s s') a)} wFm‚Çúa' d) 
       (wellFormedStmTransitive wFsm‚Çúa d) 
       (wellFormedStmTransitive wFs'm‚Çúa d) 
wellFormedStmTransitive (WhileWF {e} {s} {_} {a} wFm‚Çúa' wFsm‚Çúa') d = 
  WhileWF (wellFormed-trans {_} {_} {_} {mergeùíú a (proj‚ÇÇ (transStm s a))} wFm‚Çúa' d) 
          (wellFormedStmTransitive wFsm‚Çúa' d) 