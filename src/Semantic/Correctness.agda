module Semantic.Correctness {n} where

open import Data.Empty
open import Data.Fin
  renaming (_‚âü_ to _‚âüf_)
open import Data.List
  hiding (lookup)
open import Data.Nat 
  renaming (_<_ to _<‚Çô_)
open import Data.Product 
open import Data.Vec.Base
  hiding (length)
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality 
open ‚â°-Reasoning

open import Semantic.CorrectnessLemmas {n}
open import Semantic.Memory {n}
open import Semantic.Semantic {n}
open import Semantic.WellFormed {n}
open import Transformation.ActiveSet {n}
open import Transformation.AST {n}
open import Transformation.Transformation {n}

mutual
  -- Correctness of the program transformation.
  correctness : {s : ASTStmS} {m m' : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {A : ùíú}
    ‚Üí ‚ü® s , m ‚ü©‚áì m'
    ‚Üí ‚ü® proj‚ÇÅ (transStm s A) , m‚Çú ‚ü©‚áì‚Çú m‚Çú'
    ‚Üí wellFormedStm s m‚Çú A
    ‚Üí m ==‚Çò m‚Çú - A
    ‚Üí m' ==‚Çò m‚Çú' - (proj‚ÇÇ (transStm s A))
  correctness Skip Skip‚Çú _ meq = meq
  correctness s@{x := e} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ])} {m‚Çú} {.(m‚Çú [ x , lookup A x ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú)} {A} 
    Assign
    Assign‚Çú
    (AssignWF wFm‚ÇúA)
    meq varName with varName ‚âüf x
  ...              | yes vN=x = begin
                                  lookup (m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ]) varName
                                    ‚â°‚ü® cong (Œª y ‚Üí lookup (m [ y ]‚âî ‚ü¶ e ‚üß‚Çë m) varName) (sym vN=x) ‚ü©  
                                  lookup (m [ varName ]‚âî ‚ü¶ e ‚üß‚Çë m) varName
                                    ‚â°‚ü® lookupx‚àòchangex varName m ‚ü©  
                                  ‚ü¶ e ‚üß‚Çë m
                                    ‚â°‚ü® expEquality {e} {m} {m‚Çú} meq refl refl ‚ü©
                                  ‚ü¶ transExp e A ‚üß‚Çú m‚Çú
                                    ‚â°‚ü® sym (lookup‚Çúx‚àòchange‚Çúx varName m‚Çú (wFm‚ÇúA varName)) ‚ü©
                                  lookup‚Çú (m‚Çú [ varName , lookup A varName ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) A varName
                                    ‚â°‚ü® cong (Œª y ‚Üí lookup‚Çú (m‚Çú [ y , lookup A y ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) A varName) vN=x ‚ü©
                                  lookup‚Çú (m‚Çú [ x , lookup A x ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) A varName
                                ‚àé
  ...              | no vN!=x = begin 
                                  lookup (m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ]) varName
                                    ‚â°‚ü® lookupy‚àòchangex x varName m vN!=x ‚ü©  
                                  lookup m varName 
                                    ‚â°‚ü® meq varName ‚ü©  
                                  lookup‚Çú m‚Çú A varName
                                    ‚â°‚ü® sym (lookup‚Çúy‚àòchange‚Çúx x varName m‚Çú vN!=x) ‚ü© 
                                  lookup‚Çú (m‚Çú [ x , lookup A x ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) A varName  
                                ‚àé
  correctness s@{‚ü¶ x := e ‚üß} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ])} {m‚Çú} {m‚Çú'} {A} 
    AssignBr 
    Assign‚Çú 
    (AssignBrWF wFm‚ÇúA')
    meq varName with varName ‚âüf x
  ...              | yes vN=x = begin
                                    lookup (m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ]) varName
                                  ‚â°‚ü® cong (Œª y ‚Üí lookup (m [ y ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ]) varName) (sym vN=x) ‚ü©  
                                    lookup (m [ varName ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ]) varName
                                  ‚â°‚ü® lookupx‚àòchangex varName m ‚ü©  
                                    ‚ü¶ e ‚üß‚Çë m
                                  ‚â°‚ü® expEquality {e} {m} {m‚Çú} meq refl refl ‚ü©   
                                    ‚ü¶ transExp e A ‚üß‚Çú m‚Çú
                                  ‚â°‚ü® sym (listLookupx‚àòlistUpdatex (suc (lookup A x)) (lookup m‚Çú x) (subst (Œª y ‚Üí y <‚Çô length (lookup m‚Çú x)) (lookupx‚àòchangex x A) (wFm‚ÇúA' x))) ‚ü©   
                                    lookupOrDefault (suc (lookup A x)) (safeListUpdate (lookup m‚Çú x) (suc (lookup A x)) (‚ü¶ transExp e A ‚üß‚Çú m‚Çú))
                                  ‚â°‚ü® cong (Œª y ‚Üí lookupOrDefault y (safeListUpdate (lookup m‚Çú x) (suc (lookup A x)) (‚ü¶ transExp e A ‚üß‚Çú m‚Çú))) (sym (lookupx‚àòchangex x A)) ‚ü©   
                                    lookupOrDefault (lookup (A [ x ]‚âî suc (lookup A x)) x) (safeListUpdate (lookup m‚Çú x) (suc (lookup A x)) (‚ü¶ transExp e A ‚üß‚Çú m‚Çú))
                                  ‚â°‚ü® cong (Œª y ‚Üí lookupOrDefault (lookup (A [ x ]‚âî suc (lookup A x)) x) y) (sym (lookupx‚àòchangex x m‚Çú)) ‚ü©   
                                    lookupOrDefault (lookup (A [ x ]‚âî suc (lookup A x)) x) (lookup (m‚Çú [ x , suc (lookup A x) ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) x)
                                  ‚â°‚ü®‚ü©
                                    lookup‚Çú (m‚Çú [ x , suc (lookup A x) ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) (A [ x ]‚âî suc (lookup A x)) x
                                  ‚â°‚ü® cong (Œª y ‚Üí lookup‚Çú (m‚Çú [ x , suc (lookup A x) ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) (A [ x ]‚âî suc (lookup A x)) y) (sym vN=x) ‚ü©   
                                    lookup‚Çú (m‚Çú [ x , suc (lookup A x) ‚Ü¶ ‚ü¶ transExp e A ‚üß‚Çú m‚Çú ]‚Çú) (A [ x ]‚âî suc (lookup A x)) varName
                                ‚àé
  ...              | no vN!=x = begin 
                                  lookup (m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ]) varName
                                    ‚â°‚ü® lookupy‚àòchangex x varName m vN!=x ‚ü©  
                                  lookup m varName
                                    ‚â°‚ü® meq varName ‚ü©  
                                  lookup‚Çú m‚Çú A varName  
                                    ‚â°‚ü® sym (lookup‚Çúy‚àòchange‚Çúx x varName m‚Çú vN!=x) ‚ü©
                                  lookup‚Çú m‚Çú' A varName  
                                    ‚â°‚ü® cong (Œª y ‚Üí lookupOrDefault y (lookup m‚Çú' varName)) (sym (lookupy‚àòchangex x varName A vN!=x)) ‚ü©
                                  lookup‚Çú m‚Çú' (proj‚ÇÇ (transStm s A)) varName  
                                ‚àé
  correctness {Seq s‚ÇÅ s‚ÇÇ} (Seq d‚ÇÅ d‚ÇÇ) (Seq‚Çú d‚Çú‚ÇÅ d‚Çú‚ÇÇ) (SeqWF wFs‚ÇÅm‚ÇúA wFs‚ÇÇm‚ÇúA') meq = 
    let correct‚ÇÅ = correctness d‚ÇÅ d‚Çú‚ÇÅ wFs‚ÇÅm‚ÇúA meq
        wFs‚ÇÇm‚Çú‚ÇÅA' = wellFormedStm-trans wFs‚ÇÇm‚ÇúA' d‚Çú‚ÇÅ
     in correctness d‚ÇÇ d‚Çú‚ÇÇ wFs‚ÇÇm‚Çú‚ÇÅA' correct‚ÇÅ
  correctness {If cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {A} 
    (IfT _ _ d) 
    (IfT‚Çú _ _ (Seq‚Çú {.m‚Çú} {m‚Çú‚ÇÅ} {.m‚Çú'} d‚Çú‚ÇÅ d‚Çú‚ÇÇ))
    (IfWF wFm‚ÇúA' wFsTm‚ÇúA _)
    meq = 
      let AT = proj‚ÇÇ (transStm sT A)
          AF = proj‚ÇÇ (transStm sF A)
          A' = mergeùíú AT AF
          m'=m‚Çú‚ÇÅAT : m' ==‚Çò m‚Çú‚ÇÅ - AT
          m'=m‚Çú‚ÇÅAT = correctness d d‚Çú‚ÇÅ wFsTm‚ÇúA meq 
          m‚Çú‚ÇÅAT=m‚Çú'A' : m‚Çú‚ÇÅ - AT ==‚Çò‚Çú m‚Çú' - A'
          m‚Çú‚ÇÅAT=m‚Çú'A' = :=ùíú-memEq d‚Çú‚ÇÇ (wellFormed-trans {A = A'} wFm‚ÇúA' d‚Çú‚ÇÅ)
        in ==‚Çò-trans {m'} {m‚Çú‚ÇÅ} {m‚Çú'} {AT} {A'} m'=m‚Çú‚ÇÅAT m‚Çú‚ÇÅAT=m‚Çú'A'
  correctness {If cond _ _} {m} {_} {m‚Çú} {_} {A} (IfT {v = v} em=v v<>0 _) (IfF‚Çú em'=0 _) _ meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {v} {0} {A} meq em=v em'=0
     in ‚ä•-elim (v<>0 em=em')
  correctness {If cond _ _} {m} {_} {m‚Çú} {_} {A} (IfF em=0 _) (IfT‚Çú {v = v} em'=v v<>0 _) _ meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {0} {v} {A} meq em=0 em'=v
     in ‚ä•-elim (v<>0 (sym em=em'))
  correctness {If cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {A}
    (IfF _ d) 
    (IfF‚Çú _ (Seq‚Çú {.m‚Çú} {m‚Çú‚ÇÅ} {.m‚Çú'} d‚Çú‚ÇÅ d‚Çú‚ÇÇ))
    (IfWF wFm‚ÇúA' _ wFsFm‚ÇúA)
    meq = 
      let AT = proj‚ÇÇ (transStm sT A)
          AF = proj‚ÇÇ (transStm sF A)
          A' = mergeùíú AT AF
          m'=m‚Çú‚ÇÅAF : m' ==‚Çò m‚Çú‚ÇÅ - AF
          m'=m‚Çú‚ÇÅAF = correctness d d‚Çú‚ÇÅ wFsFm‚ÇúA meq
          m‚Çú‚ÇÅAF=m‚Çú'A' : m‚Çú‚ÇÅ - AF ==‚Çò‚Çú m‚Çú' - A'
          m‚Çú‚ÇÅAF=m‚Çú'A' = :=ùíú-memEq d‚Çú‚ÇÇ (wellFormed-trans {A = A'} wFm‚ÇúA' d‚Çú‚ÇÅ)
        in ==‚Çò-trans {m'} {m‚Çú‚ÇÅ} {m‚Çú'} {AF} {A'} m'=m‚Çú‚ÇÅAF m‚Çú‚ÇÅAF=m‚Çú'A'
  correctness {While cond s} {m} {_} {m‚Çú} {_} {A} d 
    (Seq‚Çú {.m‚Çú} {m‚Çú‚ÇÅ} {_} d‚Çú‚ÇÅ d‚Çú‚ÇÇ) 
    wF@(WhileWF wFm‚ÇúA‚ÇÅ _)
    meq = 
      let A‚ÇÅ = mergeùíú A (proj‚ÇÇ (transStm s A))
          m‚ÇúA=m‚Çú‚ÇÅA‚ÇÅ : m‚Çú - A ==‚Çò‚Çú m‚Çú‚ÇÅ - A‚ÇÅ
          m‚ÇúA=m‚Çú‚ÇÅA‚ÇÅ = :=ùíú-memEq {A} {A‚ÇÅ} {m‚Çú} {m‚Çú‚ÇÅ} d‚Çú‚ÇÅ wFm‚ÇúA‚ÇÅ
       in whileCorrectness d d‚Çú‚ÇÇ refl refl refl refl (wellFormedStm-trans wF d‚Çú‚ÇÅ) (==‚Çò-trans {m} {m‚Çú} {m‚Çú‚ÇÅ} {A} {A‚ÇÅ} meq m‚ÇúA=m‚Çú‚ÇÅA‚ÇÅ)

  -- Correctness of the program transformation for the While case.
  whileCorrectness : {e : ASTExpS} {s : ASTStmS} {e' : ASTExp} {s' : ASTStm} {m m' : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {A A‚ÇÅ A‚ÇÇ : ùíú}
    ‚Üí ‚ü® While e s , m ‚ü©‚áì m'
    ‚Üí ‚ü® WHILE e' s' , m‚Çú ‚ü©‚áì‚Çú m‚Çú' 
    ‚Üí e' ‚â° transExp e A‚ÇÅ
    ‚Üí s' ‚â° SEQ (proj‚ÇÅ (transStm s A‚ÇÅ)) (A‚ÇÅ :=ùíú A‚ÇÇ)
    ‚Üí A‚ÇÅ ‚â° mergeùíú A (proj‚ÇÇ (transStm s A))
    ‚Üí A‚ÇÇ ‚â° proj‚ÇÇ (transStm s A‚ÇÅ)
    ‚Üí wellFormedStm (While e s) m‚Çú A
    ‚Üí m ==‚Çò m‚Çú - A‚ÇÅ
    ‚Üí m' ==‚Çò m‚Çú' - A‚ÇÅ
  whileCorrectness (WhileF _) (WhileF‚Çú _) _ _ _ _ _ meq = meq
  whileCorrectness {e = e} {m = m} (WhileF em=0) (WhileT‚Çú {v = v} em'=v v<>0 _ _) refl refl refl refl _ meq = 
    let em=em' = expEquality {e} {m} {_} {0} {v} {_} meq em=0 em'=v
     in ‚ä•-elim (v<>0 (sym em=em'))
  whileCorrectness {e = e} {m = m} (WhileT {v = v} em=v v<>0 _ _) (WhileF‚Çú em'=0) refl refl refl refl _ meq = 
    let em=em' = expEquality {e} {m} {_} {v} {0} {_} meq em=v em'=0
     in ‚ä•-elim (v<>0 em=em')
  whileCorrectness {A‚ÇÅ = A‚ÇÅ} {A‚ÇÇ = A‚ÇÇ} 
    (WhileT {m} {m‚ÇÅ} {m'} _ _ d‚ÇÅ d‚ÇÇ) 
    (WhileT‚Çú {m‚Çú} {m‚Çú‚ÇÇ} {m‚Çú'} _ _ d‚Çú@(Seq‚Çú {.m‚Çú} {m‚Çú‚ÇÅ} {.m‚Çú‚ÇÇ} d‚Çú‚ÇÅ d‚Çú‚ÇÇ) d‚Çú‚ÇÉ)
    refl refl refl refl
    wF@(WhileWF wFm‚ÇúA‚ÇÅ wFsm‚ÇúA‚ÇÅ)
    meq = 
      let m‚ÇÅ=m‚Çú‚ÇÅA‚ÇÇ : m‚ÇÅ ==‚Çò m‚Çú‚ÇÅ - A‚ÇÇ
          m‚ÇÅ=m‚Çú‚ÇÅA‚ÇÇ = correctness d‚ÇÅ d‚Çú‚ÇÅ wFsm‚ÇúA‚ÇÅ meq
          m‚Çú‚ÇÅA‚ÇÇ=m‚Çú‚ÇÇA‚ÇÅ : m‚Çú‚ÇÅ - A‚ÇÇ ==‚Çò‚Çú m‚Çú‚ÇÇ - A‚ÇÅ
          m‚Çú‚ÇÅA‚ÇÇ=m‚Çú‚ÇÇA‚ÇÅ = :=ùíú-memEq d‚Çú‚ÇÇ (wellFormed-trans {A = A‚ÇÅ} wFm‚ÇúA‚ÇÅ d‚Çú‚ÇÅ)
       in whileCorrectness d‚ÇÇ d‚Çú‚ÇÉ refl refl refl refl (wellFormedStm-trans wF d‚Çú) (==‚Çò-trans {m‚ÇÅ} {m‚Çú‚ÇÅ} {m‚Çú‚ÇÇ} {A‚ÇÇ} {A‚ÇÅ} m‚ÇÅ=m‚Çú‚ÇÅA‚ÇÇ m‚Çú‚ÇÅA‚ÇÇ=m‚Çú‚ÇÇA‚ÇÅ)
