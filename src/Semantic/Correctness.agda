module Semantic.Correctness {n} where

open import Data.Empty
open import Data.Fin
  renaming (_‚âü_ to _‚âüf_)
open import Data.List
  hiding (lookup)
open import Data.Nat 
  renaming (_<_ to _<‚Çô_)
open import Data.Product 
open import Data.Vec.Base
  hiding (length)
open import Relation.Nullary
open import Relation.Binary.PropositionalEquality 

open import Semantic.CorrectnessLemmas {n}
open import Semantic.Memory {n}
open import Semantic.Semantic {n}
open import Semantic.WellFormed {n}
open import Transformation.ActiveSet {n}
open import Transformation.AST {n}
open import Transformation.Transformation {n}

-- CORRECTNESS PROOF
-- Correctness of the program transformation for the While case.
whileCorrectness : {e : ASTExpS} {s : ASTStmS} {e' : ASTExp} {s' : ASTStm} {m m' : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {A A‚ÇÅ A‚ÇÇ : ùíú}
  ‚Üí ‚ü® While e s , m ‚ü©‚áì m'
  ‚Üí ‚ü® WHILE e' s' , m‚Çú ‚ü©‚áì‚Çú m‚Çú' 
  ‚Üí e' ‚â° transExp e A‚ÇÅ
  ‚Üí s' ‚â° SEQ (proj‚ÇÅ (transStm s A‚ÇÅ)) (A‚ÇÅ :=ùíú A‚ÇÇ)
  ‚Üí A‚ÇÅ ‚â° mergeùíú A (proj‚ÇÇ (transStm s A))
  ‚Üí A‚ÇÇ ‚â° proj‚ÇÇ (transStm s A‚ÇÅ)
  ‚Üí wellFormedStm (While e s) m‚Çú A
  ‚Üí m ==‚Çò m‚Çú - A‚ÇÅ
  ‚Üí m' ==‚Çò m‚Çú' - A‚ÇÅ

-- Correctness of the program transformation.
correctness : {s : ASTStmS} {m m' : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {active : ùíú}
  ‚Üí ‚ü® s , m ‚ü©‚áì m'
  ‚Üí ‚ü® proj‚ÇÅ (transStm s active) , m‚Çú ‚ü©‚áì‚Çú m‚Çú'
  ‚Üí wellFormedStm s m‚Çú active
  ‚Üí m ==‚Çò m‚Çú - active
  ‚Üí m' ==‚Çò m‚Çú' - (proj‚ÇÇ (transStm s active))

-- TODO(minor): Rewrite this using a let and type explanations for the difficult terms like I did in AssignmentId.
-- Ceci dice que hay un formato en Agda que me puede permitir simplificar estas igualdades por transitividad.
correctness s@{x := e} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ])} {m‚Çú} {.(m‚Çú [ x , lookup a x ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú ]‚Çú)} {a} 
  Assign
  Assign‚Çú
  (AssignWF wFm‚Çúa)
  meq varName with varName ‚âüf x
...              | yes vN=x = trans 
                                -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß‚Çë m) varName === v'
                                (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß‚Çë m) varName === v
                                  (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß‚Çë m) varName === lookup (m [ varName ]‚âî ‚ü¶ e ‚üß‚Çë m) varName
                                    (sym (cong (Œª y ‚Üí lookup (m [ y ]‚âî ‚ü¶ e ‚üß‚Çë m) varName) vN=x))
                                  -- lookup (m [ varName ]‚âî v) varName ‚â° v
                                    (lookupx‚àòchangex varName m)
                                  )
                                  -- v === v'
                                  (expEquality {e} {m} {m‚Çú} meq refl refl)
                                ) 
                                -- v' === lookup (m‚Çú [ x , lookup a x ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú) varName
                                (trans 
                                  -- v' === lookupOrDefault activeVar (lookup (m‚Çú [ varName ]‚âî (safeListUpdate (lookup m‚Çú varName) activeVar v)) varName)
                                  (sym (lookup‚Çúx‚àòchange‚Çúx varName m‚Çú (wFm‚Çúa varName)))
                                  -- lookupOrDefault activeVar (lookup (m‚Çú [ varName ]‚âî (safeListUpdate (lookup m‚Çú varName) activeVar v)) varName)
                                  -- ===
                                  -- lookupOrDefault activeVar (lookup (m‚Çú [ x ]‚âî (safeListUpdate (lookup m‚Çú x) (lookup a x) v)) varName)
                                  (cong (Œª y ‚Üí lookupOrDefault (lookup a varName) (lookup (m‚Çú [ y , lookup a y ‚Ü¶ ‚ü¶ transExp e a ‚üß‚Çú m‚Çú ]‚Çú) varName)) vN=x)
                                )
...              | no vN!=x = trans 
                                (trans 
                                  (lookupy‚àòchangex x varName m vN!=x)
                                  (meq varName)
                                ) 
                                (sym (lookup‚Çúy‚àòchange‚Çúx x varName m‚Çú vN!=x))

-- TODO(minor): Same as above, rewrite this using a let and type explanations.
correctness s@{‚ü¶ x := e ‚üß} {m} {.(m [ x ‚Ü¶ ‚ü¶ e ‚üß‚Çë m ])} {m‚Çú} {m‚Çú'} {a} 
  AssignBr 
  Assign‚Çú 
  (AssignBrWF wFm‚Çúa')
  meq varName with varName ‚âüf x
...              | yes vN=x = trans 
                                -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß‚Çë m) varName === v'
                                (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß‚Çë m) varName === v
                                  (trans 
                                  -- lookup (m [ x ]‚âî ‚ü¶ e ‚üß‚Çë m) varName === lookup (m [ varName ]‚âî ‚ü¶ e ‚üß‚Çë m) varName
                                    (sym (cong (Œª y ‚Üí lookup (m [ y ]‚âî ‚ü¶ e ‚üß‚Çë m) varName) vN=x))
                                  -- lookup (m [ varName ]‚âî v) varName ‚â° v
                                    (lookupx‚àòchangex varName m)
                                  )
                                  -- v === v'
                                  (expEquality {e} {m} {m‚Çú} meq refl refl)
                                )
                                -- v' ‚â° lookup‚Çú m‚Çú' a' varName
                                (sym (trans
                                  -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) varName) (lookup (m‚Çú [ x ]‚âî (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')) varName)
                                  -- ===
                                  -- lookupOrDefault (suc (lookup a x)) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                  (trans
                                    -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) varName) (lookup (m‚Çú [ x , suc (lookup a x) ‚Ü¶ v' ]‚Çú) varName)
                                    -- ===
                                    -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) x) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                    (trans 
                                      (cong (Œª y ‚Üí lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) y) (lookup (m‚Çú [ x ]‚âî (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) (‚ü¶ transExp e a ‚üß‚Çú m‚Çú))) y)) vN=x)
                                      (cong (Œª y ‚Üí lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) x) y) (lookupx‚àòchangex x m‚Çú))
                                    )
                                    -- lookupOrDefault (lookup (a [ x ]‚âî suc (lookup a x)) x) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                    -- ===
                                    -- lookupOrDefault (suc (lookup a x)) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v')
                                    (cong (Œª y ‚Üí lookupOrDefault y (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) (‚ü¶ transExp e a ‚üß‚Çú m‚Çú))) (lookupx‚àòchangex x a))
                                  )
                                  -- lookupOrDefault (suc (lookup a x)) (safeListUpdate (lookup m‚Çú x) (suc (lookup a x)) v') ‚â° v'
                                  (listLookupx‚àòlistUpdatex (suc (lookup a x)) (lookup m‚Çú x) (subst (Œª y ‚Üí y <‚Çô length (lookup m‚Çú x)) (lookupx‚àòchangex x a) (wFm‚Çúa' x)))
                                ))
...              | no vN!=x = trans 
                                -- lookup m' varName ‚â° lookup‚Çú m‚Çú active varName
                                (trans 
                                  -- lookup m' varName ‚â° lookup m varName
                                  (lookupy‚àòchangex x varName m vN!=x)
                                  -- lookup m varName ‚â° lookup‚Çú m‚Çú active varName
                                  (meq varName)
                                )
                                -- lookup‚Çú m‚Çú active varName ‚â° lookup‚Çú m‚Çú' active' varName
                                (trans
                                  -- lookup‚Çú m‚Çú a varName ‚â° lookup‚Çú m‚Çú' a varName
                                  (sym (lookup‚Çúy‚àòchange‚Çúx x varName m‚Çú vN!=x))
                                  -- lookup‚Çú m‚Çú' a varName ‚â° lookup‚Çú m‚Çú' a' varName
                                  (cong (Œª y ‚Üí lookupOrDefault y (lookup m‚Çú' varName)) (sym (lookupy‚àòchangex x varName a vN!=x)))  
                                )

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfT {.m} {.m'} {.cond} {v} {.sT} {.sF} em=v v<>0 d) 
  (IfT‚Çú {.m‚Çú} {.m‚Çú'} {.(transExp cond a)} {v'} {sT'} {sF'} em'=v' v'<>0 (Seq‚Çú {m1} {m2} {m3} d' d''))
  (IfWF wFm‚Çúa' wFsTm‚Çúa _)
  meq = 
    let aT = proj‚ÇÇ (transStm sT a)
        aF = proj‚ÇÇ (transStm sF a)
        a' = mergeùíú aT aF
        m1=mt1a' = correctness {sT} {m} {m'} {m‚Çú} {m2} {a} d d' wFsTm‚Çúa meq 
        mt1a'=mt2a'' = :=ùíú-memEq {aT} {a'} d'' (wellFormed-trans {_} {_} {_} {a'} wFm‚Çúa' d')
      in ==‚Çò-trans {m'} {m2} {m‚Çú'} {aT} {a'} m1=mt1a' mt1a'=mt2a''

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfT {.m} {.m'} {.cond} {v} {_} {_} em=v v<>0 d) 
  (IfF‚Çú em'=0 d') 
  _
  meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {v} {0} {a} meq em=v em'=0
     in ‚ä•-elim (v<>0 em=em')

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (IfF em=0 d) 
  (IfT‚Çú {.m‚Çú} {.m‚Çú'} {_} {v} {_} {_} em'=v v<>0 d') 
  _
  meq = 
    let em=em' = expEquality {cond} {m} {m‚Çú} {0} {v} {a} meq em=0 em'=v
     in ‚ä•-elim (v<>0 (sym em=em'))

correctness {If0 cond sT sF} {m} {m'} {m‚Çú} {m‚Çú'} {a}
  (IfF {.m} {.m'} {.cond} {.sT} {.sF} em=0 d) 
  (IfF‚Çú {.m‚Çú} {.m‚Çú'} {.(transExp cond a)} {sT'} {sF'} em'=0 (Seq‚Çú {m1} {m2} {m3} d' d''))
  (IfWF wFm‚Çúa' _ wFsTm‚Çúa)
  meq = 
    let aT = proj‚ÇÇ (transStm sT a)
        aF = proj‚ÇÇ (transStm sF a)
        a' = mergeùíú aT aF
        m1=mt1a' = correctness {sF} {m} {m'} {m‚Çú} {m2} {a} d d' wFsTm‚Çúa meq
        mt1a'=mt2a'' = :=ùíú-memEq {aF} {a'} d'' (wellFormed-trans {_} {_} {_} {a'} wFm‚Çúa' d')
      in ==‚Çò-trans {m'} {m2} {m‚Çú'} {aF} {a'} m1=mt1a' mt1a'=mt2a''

correctness {While cond s} {m} {m'} {m‚Çú} {m‚Çú'} {active} d 
  (Seq‚Çú {.m‚Çú} {m‚Çú1} {.m‚Çú'} d‚Çú d‚Çú') 
  wF@(WhileWF wFm‚Çúa‚ÇÅ _)
  meq = 
    let A‚ÇÅ = mergeùíú active (proj‚ÇÇ (transStm s active))
        mtA=mt1A1 = :=ùíú-memEq {active} {A‚ÇÅ} {m‚Çú} {m‚Çú1} d‚Çú wFm‚Çúa‚ÇÅ
     in whileCorrectness d d‚Çú' refl refl refl refl (wellFormedStmTransitive wF d‚Çú) (==‚Çò-trans {m} {m‚Çú} {m‚Çú1} {active} {A‚ÇÅ} meq mtA=mt1A1)

correctness {Seq s s‚ÇÅ} {m} {m'} {m‚Çú} {m‚Çú'} {a} 
  (Seq {.m} {m2} {.m'} d d‚ÇÅ) 
  (Seq‚Çú {.m‚Çú} {mt2} {.m‚Çú'} d' d'') 
  (SeqWF wFsm‚Çúa wFs‚ÇÅm‚Çúa')
  meq = 
    let h1 = correctness {s} {m} {m2} {m‚Çú} {mt2} d d' wFsm‚Çúa meq
        wFs‚ÇÅm‚Çú2a' = wellFormedStmTransitive wFs‚ÇÅm‚Çúa' d'
     in correctness d‚ÇÅ d'' wFs‚ÇÅm‚Çú2a' h1

correctness {Skip} {m} {.m} {m‚Çú} {.m‚Çú} {a} Skip Skip‚Çú _ meq = meq

-- whileCorrectness : {e : ASTExpS} {s : ASTStmS} {e' : ASTExp} {s' : ASTStm} {m m' : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {A A‚ÇÅ A‚ÇÇ : ùíú}
--   ‚Üí ‚ü® While e s , m ‚ü©‚áì m'
--   ‚Üí ‚ü® WHILE e' s' , m‚Çú ‚ü©‚áì‚Çú m‚Çú' 
--   ‚Üí e' ‚â° transExp e A‚ÇÅ
--   ‚Üí s' ‚â° SEQ (proj‚ÇÅ (transStm s A‚ÇÅ)) (A‚ÇÅ :=ùíú A‚ÇÇ)
--   ‚Üí A‚ÇÅ ‚â° mergeùíú A (proj‚ÇÇ (transStm s A))
--   ‚Üí A‚ÇÇ ‚â° proj‚ÇÇ (transStm s A‚ÇÅ)
--   ‚Üí wellFormedStm (While e s) m‚Çú A
--   ‚Üí m ==‚Çò m‚Çú - A‚ÇÅ
--   ‚Üí m' ==‚Çò m‚Çú' - A‚ÇÅ

whileCorrectness {e} {s} {e'} {s'} {m} {m'} {m‚Çú} {m‚Çú'} {A} {A‚ÇÅ} {A‚ÇÇ} 
  (WhileF em=0) 
  (WhileF‚Çú em'=0) 
  refl refl refl refl _
  meq = meq

whileCorrectness {e} {s} {e'} {s'} {m} {m'} {m‚Çú} {m‚Çú'} {A} {A‚ÇÅ} {A‚ÇÇ} 
  (WhileF em=0) 
  (WhileT‚Çú {_} {_} {_} {_} {v} {_} em'=v v<>0 _ _)
  refl refl refl refl _
  meq = 
    let em=em' = expEquality {e} {m} {_} {0} {v} {_} meq em=0 em'=v
     in ‚ä•-elim (v<>0 (sym em=em'))

whileCorrectness {e} {s} {e'} {s'} {m} {m'} {m‚Çú} {m‚Çú'} {A} {A‚ÇÅ} {A‚ÇÇ} 
  (WhileT {.m} {_} {_} {.e} {v} {_} em=v v<>0 _ _) 
  (WhileF‚Çú em'=0) 
  refl refl refl refl _
  meq = 
    let em=em' = expEquality {e} {m} {_} {v} {0} {_} meq em=v em'=0
     in ‚ä•-elim (v<>0 em=em')

whileCorrectness {e} {s} {e'} {s'} {m} {m'} {m‚Çú} {m‚Çú'} {A} {A‚ÇÅ} {A‚ÇÇ} 
  (WhileT {.m} {m1} {.m'} {.e} {_} {.s} _ _ d d') 
  (WhileT‚Çú {.m‚Çú} {m‚Çú2} {.m‚Çú'} {cond'} {_} {s'} _ _ d‚Çú@(Seq‚Çú {.m‚Çú} {m‚Çú1} {.m‚Çú2} d‚Çú' d‚Çú'') d‚Çú''')
  refl refl refl refl
  wF@(WhileWF wFm‚Çúa‚ÇÅ wFsm‚ÇúA‚ÇÅ)
  meq = 
    let -- m1 ==‚Çò m‚Çú1 - A2
        h = correctness {s} {m} {m1} {m‚Çú} {m‚Çú1} {A‚ÇÅ} d d‚Çú' wFsm‚ÇúA‚ÇÅ meq
        -- mt1 - A2 ==‚Çò‚Çú mt2 - A1
        mt1A2=mt2A1 = :=ùíú-memEq {A‚ÇÇ} {A‚ÇÅ} {m‚Çú1} {m‚Çú2} d‚Çú'' (wellFormed-trans {_} {_} {_} {A‚ÇÅ} wFm‚Çúa‚ÇÅ d‚Çú')
        -- m' ==‚Çò m‚Çú' - A1
     in whileCorrectness d' d‚Çú''' refl refl refl refl (wellFormedStmTransitive wF d‚Çú) (==‚Çò-trans {m1} {m‚Çú1} {m‚Çú2} {A‚ÇÇ} {A‚ÇÅ} h mt1A2=mt2A1)
