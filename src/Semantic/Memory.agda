module Semantic.Memory {n} where

open import Data.Empty
open import Data.Fin
  hiding (_+_)
open import Data.List
  hiding (lookup ; [_])
open import Data.Nat 
  renaming (_<_ to _<‚Çô_)
open import Data.Nat.Properties
open import Data.Product 
open import Data.Vec.Base
  hiding (length)
open import Function
open import Relation.Binary.PropositionalEquality 

open import Transformation.ActiveSet {n}
open import Transformation.AST {n}
open import Transformation.VariableSet {n}

-- State of the memory at a certain program point for the bracketed program.
Memory : Set _
Memory = Vec ‚Ñï n

-- Update the value of a variable in memory.
infixl 6 _[_‚Ü¶_]
_[_‚Ü¶_] : Memory ‚Üí Fin n ‚Üí ‚Ñï ‚Üí Memory
m [ name ‚Ü¶ v ] = m [ name ]‚âî v

-- Semantic evaluation of expressions.
‚ü¶_‚üß‚Çë : ASTExpS ‚Üí Memory ‚Üí ‚Ñï
‚ü¶ IntVal n ‚üß‚Çë m = n
‚ü¶ Var v ‚üß‚Çë m = lookup m v
‚ü¶ Add exp‚ÇÅ exp‚ÇÇ ‚üß‚Çë m = ‚ü¶ exp‚ÇÅ ‚üß‚Çë m + ‚ü¶ exp‚ÇÇ ‚üß‚Çë m

-- State of the memory at a certain program point for the transformed program.
Memory‚Çú : Set _
Memory‚Çú = Vec (List ‚Ñï) n

lookupOrDefault : ‚Ñï ‚Üí List ‚Ñï ‚Üí ‚Ñï
lookupOrDefault _ [] = 0
lookupOrDefault 0 (x ‚à∑ xs) = x
lookupOrDefault (suc n) (x ‚à∑ xs) = lookupOrDefault n xs

safeListUpdate : List ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï ‚Üí List ‚Ñï
safeListUpdate [] _ _ = []
safeListUpdate (x ‚à∑ xs) 0 v = v ‚à∑ xs
safeListUpdate (x ‚à∑ xs) (suc n) v = x ‚à∑ (safeListUpdate xs n v)

-- Update the value of a variable in memory of the transformed program.
infixl 6 _[_‚Ü¶_]‚Çú
_[_‚Ü¶_]‚Çú : Memory‚Çú ‚Üí TransVariable ‚Üí ‚Ñï ‚Üí Memory‚Çú
m [ var , index ‚Ü¶ v ]‚Çú = 
  m [ var ]‚âî (safeListUpdate (lookup m var) index v)

-- Semantic evaluation of tranformed expressions.
‚ü¶_‚üß‚Çú : ASTExp ‚Üí Memory‚Çú ‚Üí ‚Ñï
‚ü¶ INTVAL n ‚üß‚Çú m = n
‚ü¶ VAR (var , index) ‚üß‚Çú m = lookupOrDefault index (lookup m var)       
‚ü¶ ADD exp‚ÇÅ exp‚ÇÇ ‚üß‚Çú m = ‚ü¶ exp‚ÇÅ ‚üß‚Çú m + ‚ü¶ exp‚ÇÇ ‚üß‚Çú m

-- Lookup of a variable in a transformed memory.
lookup‚Çú : Memory‚Çú  ‚Üí ùíú ‚Üí Fin n ‚Üí ‚Ñï
lookup‚Çú m‚Çú A x = lookupOrDefault (lookup A x) (lookup m‚Çú x)

-- Equality between a memory and the projection of a transformed memory on an active set (Definition 2).
_==‚Çò_-_ : Memory ‚Üí Memory‚Çú ‚Üí ùíú ‚Üí Set
m ==‚Çò m‚Çú - A = ‚àÄ x ‚Üí lookup m x ‚â° lookup‚Çú m‚Çú A x

-- Equality between two memory projections on active sets.
_-_==‚Çò‚Çú_-_ : Memory‚Çú ‚Üí ùíú ‚Üí Memory‚Çú ‚Üí ùíú ‚Üí Set
m‚Çú - A ==‚Çò‚Çú m‚Çú' - A' = ‚àÄ x ‚Üí lookup‚Çú m‚Çú A x ‚â° lookup‚Çú m‚Çú' A' x

-- Transitive property between ==‚Çò and ==‚Çò‚Çú.
==‚Çò-trans : {m : Memory} {m‚Çú m‚Çú' : Memory‚Çú} {A A' : ùíú}
  ‚Üí m ==‚Çò m‚Çú - A
  ‚Üí m‚Çú - A ==‚Çò‚Çú m‚Çú' - A'
  ‚Üí m ==‚Çò m‚Çú' - A'
==‚Çò-trans meq meq' var = trans (meq var) (meq' var)   

-- MEMORY LOOKUP PROPERTIES
lookupx‚àòchangex : 
  {X : Set} {m : ‚Ñï} {v : X} (index : Fin m) (vector : Vec X m) 
  ‚Üí lookup (vector [ index ]‚âî v) index ‚â° v
lookupx‚àòchangex zero (head ‚à∑ tail) = refl
lookupx‚àòchangex (suc m) (head ‚à∑ tail) = lookupx‚àòchangex m tail 

lookupy‚àòchangex : 
  {X : Set} {m : ‚Ñï} {v : X} (i‚ÇÅ i‚ÇÇ : Fin m) (vector : Vec X m)
  ‚Üí i‚ÇÇ ‚â¢  i‚ÇÅ
  ‚Üí lookup (vector [ i‚ÇÅ ]‚âî v) i‚ÇÇ ‚â° lookup vector i‚ÇÇ
lookupy‚àòchangex zero zero _ i‚ÇÇ<>i‚ÇÅ = ‚ä•-elim (i‚ÇÇ<>i‚ÇÅ refl)
lookupy‚àòchangex zero (suc _) (_ ‚à∑ _) _ = refl
lookupy‚àòchangex (suc _) zero (_ ‚à∑ _) _ = refl
lookupy‚àòchangex (suc i‚ÇÅ') (suc i‚ÇÇ') (_ ‚à∑ tail) i‚ÇÇ<>i‚ÇÅ = lookupy‚àòchangex i‚ÇÅ' i‚ÇÇ' tail (i‚ÇÇ<>i‚ÇÅ ‚àò cong suc)  

listLookupx‚àòlistUpdatex : 
  {v : ‚Ñï} (index : ‚Ñï) (list : List ‚Ñï) 
  ‚Üí index <‚Çô length list
  ‚Üí lookupOrDefault index (safeListUpdate list index v) ‚â° v
listLookupx‚àòlistUpdatex _ [] i<0 = ‚ä•-elim (n‚âÆ0 i<0)
listLookupx‚àòlistUpdatex 0 (_ ‚à∑ _) _ = refl
listLookupx‚àòlistUpdatex (suc index) (_ ‚à∑ tail) si<ll = listLookupx‚àòlistUpdatex index tail (<-pred si<ll)

lookup‚Çúx‚àòchange‚Çúx : 
  {m v var : ‚Ñï} (index : Fin m) (vector : Vec (List ‚Ñï) m) 
  ‚Üí var <‚Çô length (lookup vector index)
  ‚Üí lookupOrDefault var (lookup (vector [ index ]‚âî (safeListUpdate (lookup vector index) var v)) index) ‚â° v
lookup‚Çúx‚àòchange‚Çúx {var = var} zero (head ‚à∑ _) v<lh = listLookupx‚àòlistUpdatex var head v<lh
lookup‚Çúx‚àòchange‚Çúx (suc index) (_ ‚à∑ tail) v<lvi = lookup‚Çúx‚àòchange‚Çúx index tail v<lvi

lookup‚Çúy‚àòchange‚Çúx : 
  {m v var‚ÇÅ var‚ÇÇ : ‚Ñï} (i‚ÇÅ i‚ÇÇ : Fin m) (vector : Vec (List ‚Ñï) m) 
  ‚Üí i‚ÇÇ ‚â¢  i‚ÇÅ
  ‚Üí lookupOrDefault var‚ÇÅ (lookup (vector [ i‚ÇÅ ]‚âî (safeListUpdate (lookup vector i‚ÇÅ) var‚ÇÇ v)) i‚ÇÇ) ‚â° lookupOrDefault var‚ÇÅ (lookup vector i‚ÇÇ)
lookup‚Çúy‚àòchange‚Çúx zero zero _ i‚ÇÇ<>i‚ÇÅ = ‚ä•-elim (i‚ÇÇ<>i‚ÇÅ refl)
lookup‚Çúy‚àòchange‚Çúx zero (suc _) (_ ‚à∑ _) _ = refl
lookup‚Çúy‚àòchange‚Çúx (suc _) zero (_ ‚à∑ _) _ = refl
lookup‚Çúy‚àòchange‚Çúx (suc i‚ÇÅ') (suc i‚ÇÇ') (_ ‚à∑ tail) i‚ÇÇ<>i‚ÇÅ = lookup‚Çúy‚àòchange‚Çúx i‚ÇÅ' i‚ÇÇ' tail (i‚ÇÇ<>i‚ÇÅ ‚àò cong suc)  
